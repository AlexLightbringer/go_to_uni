import re
import time
import requests
from bs4 import BeautifulSoup
import telebot
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from webdriver_manager.chrome import ChromeDriverManager

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "6041548049:AAEvExz7ykJOTwWF2crh0oaDfGe7r8j1lFU"
USER_UNIQUE_ID = "3572733"
USER_CHAT_IDS = ["901147319", "6720399641"]
URL = "https://urfu.ru/ru/ratings-today/"
HEADERS = {"User-Agent": "Mozilla/5.0"}

MAX_RETRIES = 3           # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
WAIT_TIMEOUT = 120        # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Å–µ–∫—É–Ω–¥)

bot = telebot.TeleBot(BOT_TOKEN)
last_message = None       # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

URLS_TO_CHECK = [
    "https://urfu.ru/ru/ratings-today/",
    "https://www.dvfu.ru/admission/spd/",
    "https://urfu.ru/ru/ratings/"
]


def check_pages_access(urls):
    all_ok = True
    for url in urls:
        try:
            r = requests.get(url, headers=HEADERS, timeout=10)
            print(f"HTTP Status Code for {url}: {r.status_code}")
            if r.status_code != 200:
                print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {url} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                all_ok = False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {url}: {e}")
            all_ok = False
    return all_ok


def parse_urfu_today(driver, wait, user_id):
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    wait = WebDriverWait(driver, WAIT_TIMEOUT)

    html = None
    try:
        for attempt in range(1, MAX_RETRIES + 1):
            print(f"[INFO] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã #{attempt}")
            driver.get(URL)

            try:
                wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "table.menu-departments")))
                rows = driver.find_elements(By.CSS_SELECTOR, "table.menu-departments tr")

                found = False
                for row in rows:
                    cells = row.find_elements(By.TAG_NAME, "td")
                    if len(cells) < 2:
                        continue
                    if "–£—Ä–∞–ª—å—Å–∫–∏–π –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç" in cells[0].text:
                        links = cells[1].find_elements(By.TAG_NAME, "a")
                        for link in links:
                            if "–û—á–Ω–∞—è" in link.text:
                                print("‚úÖ –ö–ª–∏–∫–∞–µ–º –ø–æ '–û—á–Ω–∞—è'")
                                driver.execute_script("arguments[0].click();", link)
                                found = True
                                break
                    if found:
                        break

                if not found:
                    print("‚ùå –ò–Ω—Å—Ç–∏—Ç—É—Ç/—Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    continue

                wait.until(EC.presence_of_element_located((By.XPATH, f"//td[text()='{USER_UNIQUE_ID}']")))
                print("‚úÖ ID –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                html = driver.page_source
                break

            except TimeoutException:
                print(f"[WARNING] –ü–æ–ø—ã—Ç–∫–∞ #{attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...")
                time.sleep(5)

    finally:
        driver.quit()

    if not html:
        return []

    infos = find_user_info(html)
    messages = []
    for info in infos:
        msg = (
            f"üìä –£–†–§–£ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥\n"
            f"ID: {info['id']}\n"
            f"üè´ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {info['direction']}\n\n"
            f"üìç –ü–æ–∑–∏—Ü–∏—è: {info['position']} / {info['plan']}\n"
            f"üì© –°–æ–≥–ª–∞—Å–∏–µ: {info['consent']}\n"
            f"üìù –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {info['priority']}\n"
            f"üèÜ –ë–∞–ª–ª—ã: {info['score']}\n"
        )
        msg += "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å!"
        messages.append(msg)

    return messages


def find_user_info(html):
    soup = BeautifulSoup(html, "html.parser")
    tables = soup.select("table.supp")

    results = []

    for i in range(len(tables)):
        header = tables[i]
        if "–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –ö–¶–ü" not in header.text:
            continue

        try:
            plan_text = header.find("th", string="–ü–ª–∞–Ω –ø—Ä–∏–µ–º–∞").find_next_sibling("td").text.strip()
            plan = int(plan_text)
        except:
            continue

        try:
            direction = header.find("th", string=re.compile("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")).find_next_sibling("td").text.strip()
        except:
            direction = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"

        if i + 1 >= len(tables):
            continue

        data_table = tables[i + 1]
        rows = data_table.find_all("tr")[1:]

        user_score = None
        user_priority = None
        user_consent = None
        found_row = None

        for row in rows:
            cols = row.find_all("td")
            if len(cols) < 2:
                continue
            ab_id = cols[1].get_text(strip=True)
            if ab_id == USER_UNIQUE_ID:
                found_row = row
                user_consent = cols[2].get_text(strip=True)
                user_priority = cols[3].get_text(strip=True)
                try:
                    user_score = int(cols[-2].get_text(strip=True))
                except:
                    user_score = 0
                break

        if not found_row:
            continue

        position = 1
        for row in rows:
            cols = row.find_all("td")
            if len(cols) < 2:
                continue
            consent = cols[2].get_text(strip=True)
            if consent != "–î–∞":
                continue
            try:
                score = int(cols[-2].get_text(strip=True))
            except:
                continue
            if score > user_score:
                position += 1
            elif score == user_score:
                other_id = cols[1].get_text(strip=True)
                if other_id != USER_UNIQUE_ID:
                    position += 1

        inside = position <= plan
        if inside:
            results.append({
                "id": USER_UNIQUE_ID,
                "position": position,
                "consent": user_consent,
                "priority": user_priority,
                "score": user_score,
                "plan": plan,
                "inside": inside,
                "direction": direction
            })

    return results


MAJORS_TO_CHECK = [
    "45.05.01 –ü–µ—Ä–µ–≤–æ–¥ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤–µ–¥–µ–Ω–∏–µ",
    "58.03.01 –í–æ—Å—Ç–æ–∫–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –∞—Ñ—Ä–∏–∫–∞–Ω–∏—Å—Ç–∏–∫–∞",
    "45.03.02 –õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞ (–ü–µ—Ä–µ–≤–æ–¥ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤–µ–¥–µ–Ω–∏–µ (–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —è–∑—ã–∫–∏))",
    "41.03.01 –ó–∞—Ä—É–±–µ–∂–Ω–æ–µ —Ä–µ–≥–∏–æ–Ω–æ–≤–µ–¥–µ–Ω–∏–µ",
    "45.03.02 –õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞ (–ü–µ—Ä–µ–≤–æ–¥ –∏ –ª–∏–Ω–≥–≤–æ–ø–µ—Ä–µ–≤–æ–¥—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫–∏))",
    "45.03.02 –õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞ (–ú–µ–∂–∫—É–ª—å—Ç—É—Ä–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫–∏))",
    "44.03.05 –ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—Å –¥–≤—É–º—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏) (–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) –∏ –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∫–æ—Ä–µ–π—Å–∫–∏–π))",
    "44.03.05 –ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—Å –¥–≤—É–º—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏) (–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) –∏ –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∫–∏—Ç–∞–π—Å–∫–∏–π))",
]


def dvfu_check_all_majors(driver, wait, user_id):

    all_messages = []

    for major_to_select in MAJORS_TO_CHECK:
        try:
            print(f"[DVFU] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {major_to_select}")
            driver.get("https://www.dvfu.ru/admission/spd/")
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "form[name='arrFilter']")))

            # –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–µ–ª–µ–∫—Ç–æ–≤ ‚Äî –ø–æ—à–∞–≥–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            for i in range(5):
                wait.until(lambda d: len(d.find_elements(By.CSS_SELECTOR, "form[name='arrFilter'] select")) >= i + 1)
                selects = driver.find_elements(By.CSS_SELECTOR, "form[name='arrFilter'] select")

                if i == 0:
                    Select(selects[i]).select_by_visible_text("–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç/–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç")
                    print("‚úÖ –í—ã–±—Ä–∞–Ω–æ: –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç/–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç")
                elif i == 1:
                    Select(selects[i]).select_by_visible_text("–ë—é–¥–∂–µ—Ç")
                    print("‚úÖ –í—ã–±—Ä–∞–Ω–æ: –ë—é–¥–∂–µ—Ç")
                elif i == 2:
                    Select(selects[i]).select_by_visible_text("–û—á–Ω–∞—è")
                    print("‚úÖ –í—ã–±—Ä–∞–Ω–æ: –û—á–Ω–∞—è")
                elif i == 3:
                    Select(selects[i]).select_by_visible_text(major_to_select)
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {major_to_select}")
                elif i == 4:
                    Select(selects[i]).select_by_visible_text("–ü–æ —Å—É–º–º–µ –±–∞–ª–ª–æ–≤")
                    print("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ü–æ —Å—É–º–º–µ –±–∞–ª–ª–æ–≤")

            driver.find_element(By.CSS_SELECTOR, "input.btn.btn-primary[value='–ü–æ–∫–∞–∑–∞—Ç—å']").click()
            wait.until(lambda d: "–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å" in d.page_source)

            soup = BeautifulSoup(driver.page_source, "html.parser")

            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å"
            block_row = soup.find("tr", class_="block-header")
            while block_row:
                h4 = block_row.find("h4")
                if h4 and h4.get_text(strip=True) == "–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å":
                    break
                block_row = block_row.find_next("tr", class_="block-header")
            else:
                print(f"[DVFU] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ '–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å' –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {major_to_select}")
                continue

            # –ö–≤–æ—Ç–∞
            quota_number = 0
            small = block_row.find("small")
            if small:
                quota_text = small.get_text()
                match = re.search(r"–ö–≤–æ—Ç–∞:\s*(\d+)", quota_text)
                if match:
                    quota_number = int(match.group(1))

            # –°–ª–µ–¥—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            table = block_row.find_next_sibling("tr")
            while table and not table.find_all("td"):
                table = table.find_next_sibling("tr")

            if not table:
                print(f"[DVFU] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥ '–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å' –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {major_to_select}")
                continue

            # –ù–∞–π–¥—ë–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            data_rows = []
            row = table
            while row and not row.get("class") == ["block-header"]:
                if row.find("td", class_="text-left"):
                    data_rows.append(row)
                row = row.find_next_sibling("tr")

            td_list = [r.find("td", class_="text-left") for r in data_rows if r.find("td", class_="text-left")]
            my_row = None
            my_index = None
            passed_count = 0

            for i, r in enumerate(data_rows):
                td = r.find("td", class_="text-left")
                if td and user_id in td.text:
                    my_row = r
                    my_index = i
                    break

            if my_row is None:
                print(f"[DVFU] ‚ùå –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ '–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å'")
                continue

            # üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –ø–æ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ (–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ)
            position_td = my_row.find("td")
            if position_td and position_td.text.strip().isdigit():
                position = int(position_td.text.strip())
                print(f"[DVFU] ‚úÖ –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ: –ø–æ–∑–∏—Ü–∏—è {position}")
            else:
                print("[DVFU] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É")
                position = my_index + 1

            # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –∏ –≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
            for r in data_rows[:my_index]:
                collapse = r.find("div", class_="collapse")
                if collapse:
                    text = collapse.get_text()
                    if "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ: –î–∞" in text and "–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –î–∞" in text:
                        passed_count += 1

            user_td = my_row.find("td", class_="text-left")
            collapse = user_td.find("div", class_="collapse") if user_td else None
            consent = "–ù–µ—Ç"
            priority = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            score = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            if collapse:
                paragraphs = collapse.find_all("p")
                for p in paragraphs:
                    text = p.get_text(strip=True)
                    if "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ" in text:
                        consent = "–î–∞" if "–î–∞" in text else "–ù–µ—Ç"
                    elif "–°—É–º–º–∞ –±–∞–ª–ª–æ–≤" in text:
                        score_match = re.search(r"(\d+)", text)
                        if score_match:
                            score = score_match.group(1)
                    elif "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" in text:
                        prio_match = re.search(r"(\d+)", text)
                        if prio_match:
                            priority = prio_match.group(1)

            message = (
                f"üìä –î–í–§–£ –†–µ–π—Ç–∏–Ω–≥\n"
                f"ID: {user_id}\n"
                f"üè´ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {major_to_select}\n\n"
                f"üìç –ü–æ–∑–∏—Ü–∏—è: {passed_count} / {quota_number}\n"
                f"üì© –°–æ–≥–ª–∞—Å–∏–µ: {consent}\n"
                f"üìù –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                f"üèÜ –ë–∞–ª–ª—ã: {score}\n"
            )

            if passed_count < quota_number:
                message += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å! –î–æ —Ç–µ–±—è –∑–∞–Ω—è—Ç–æ –º–µ—Å—Ç: {passed_count - 1} –∏–∑ {quota_number}"
            else:
                message += f"‚è≥ –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—à—å. –î–æ —Ç–µ–±—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –º–µ—Å—Ç: {passed_count} –∏–∑ {quota_number}"

            all_messages.append(message)

        except Exception as e:
            print(f"[DVFU] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {major_to_select}:", e)

    return all_messages


def send_telegram(info):
    global last_message
    inside_str = "‚úÖ –í–•–û–î–ò–¢ –í –ö–û–ù–ö–£–†–°!" if info['inside'] else "‚ùå –ù–ï –í–•–û–î–ò–¢ –≤ –∫–æ–Ω–∫—É—Ä—Å"
    message = (
        f"üìä –£–†–§–£ –†–µ–π—Ç–∏–Ω–≥\n"
        f"ID: {USER_UNIQUE_ID}\n"
        f"üè´ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {info['direction']}\n\n"
        f"üìç –ü–æ–∑–∏—Ü–∏—è: {info['position']} / {info['plan']}\n"
        f"üì© –°–æ–≥–ª–∞—Å–∏–µ: {info['consent']}\n"
        f"üìù –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {info['priority']}\n"
        f"üèÜ –ë–∞–ª–ª—ã: {info['score']}\n"
        f"{inside_str}"
    )
    if info['inside']:
        message += "\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ—Å—Ç—É–ø–∏–ª!"

    if message != last_message:
        for chat_id in USER_CHAT_IDS:
            bot.send_message(chat_id, message)
        print("[INFO] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.")
        last_message = message
    else:
        print("[INFO] –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å.")


def parse_urfu_all_majors(driver, wait, user_id):
    messages = []

    try:
        print("[URFU:all] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º...")
        driver.get("https://urfu.ru/ru/ratings/")
        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "table.menu-departments")))

        rows = driver.find_elements(By.CSS_SELECTOR, "table.menu-departments tr")
        found = False
        for row in rows:
            cells = row.find_elements(By.TAG_NAME, "td")
            if len(cells) < 2:
                continue
            if "–£—Ä–∞–ª—å—Å–∫–∏–π –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç" in cells[0].text:
                links = cells[1].find_elements(By.TAG_NAME, "a")
                for link in links:
                    if "–û—á–Ω–∞—è" in link.text:
                        print("[URFU:all] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É '–û—á–Ω–∞—è' —Ñ–æ—Ä–º—ã...")
                        driver.execute_script("arguments[0].click();", link)
                        found = True
                        break
            if found:
                break

        if not found:
            print("‚ùå –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç '–û—á–Ω–∞—è' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return messages

        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "table.supp")))
        print("[URFU:all] –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...")

        soup = BeautifulSoup(driver.page_source, "html.parser")
        tables = soup.select("table.supp")

        for i in range(len(tables)):
            header = tables[i]
            if "–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –ö–¶–ü" not in header.text:
                continue

            try:
                plan_text = header.find("th", string="–ü–ª–∞–Ω –ø—Ä–∏–µ–º–∞").find_next_sibling("td").text.strip()
                plan = int(plan_text)
            except:
                continue

            try:
                direction = header.find("th", string=re.compile("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")).find_next_sibling("td").text.strip()
            except:
                direction = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"

            if i + 1 >= len(tables):
                continue

            data_table = tables[i + 1]
            rows = data_table.find_all("tr")[1:]

            user_score = None
            user_priority = None
            user_consent = None
            found_row = None

            # –ù–∞–π–¥—ë–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —Å–æ—Ö—Ä–∞–Ω–∏–º –±–∞–ª–ª—ã
            for row in rows:
                cols = row.find_all("td")
                if len(cols) < 2:
                    continue
                ab_id = cols[1].get_text(strip=True)
                if ab_id == user_id:
                    found_row = row
                    user_consent = cols[2].get_text(strip=True)
                    user_priority = cols[3].get_text(strip=True)
                    try:
                        user_score = int(cols[-2].get_text(strip=True))
                    except:
                        user_score = 0
                    break

            if not found_row:
                continue  # —ç—Ç–æ—Ç —Ä–µ–π—Ç–∏–Ω–≥ ‚Äî –Ω–µ –¥–ª—è –Ω–∞—Å

            # –¢–µ–ø–µ—Ä—å –ø–æ—Å—á–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ä–µ–¥–∏ "–î–∞"
            position = 1
            for row in rows:
                cols = row.find_all("td")
                if len(cols) < 2:
                    continue
                consent = cols[2].get_text(strip=True)
                if consent != "–î–∞":
                    continue
                try:
                    score = int(cols[-2].get_text(strip=True))
                except:
                    continue
                if score > user_score:
                    position += 1
                elif score == user_score:
                    # –ï—Å–ª–∏ –±–∞–ª–ª—ã —Ä–∞–≤–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ID, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    other_id = cols[1].get_text(strip=True)
                    if other_id != user_id:
                        position += 1

            inside = position <= plan

            status_line = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å! –î–æ —Ç–µ–±—è –∑–∞–Ω—è—Ç–æ –º–µ—Å—Ç: {position - 1} –∏–∑ {plan}"
                if inside else
                f"‚è≥ –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—à—å. –î–æ —Ç–µ–±—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –º–µ—Å—Ç: {position} –∏–∑ {plan}"
            )

            msg = (
                f"üìä –£—Ä–§–£ –†–µ–π—Ç–∏–Ω–≥ (–≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)\n"
                f"ID: {user_id}\n"
                f"üè´ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n\n"
                f"üìç –ü–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –ø–æ–¥–∞–≤—à–∏—Ö —Å–æ–≥–ª–∞—Å–∏–µ: {position} / {plan}\n"
                f"üì© –°–æ–≥–ª–∞—Å–∏–µ: {user_consent}\n"
                f"üìù –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {user_priority}\n"
                f"üèÜ –ë–∞–ª–ª—ã: {user_score}\n"
                f"{status_line}"
            )
            messages.append(msg)

            print(f"[URFU:all] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}, –ø–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ '–î–∞': {position}/{plan}")


    except Exception as e:
        print("[URFU:all] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:", e)
        return []

    return messages


def run():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤
    urls = [
        "https://www.dvfu.ru/admission/spd/",
        "https://urfu.ru/ru/ratings/",
        "https://urfu.ru/ru/ratings-today/"
    ]
    check_pages_access(urls)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
    options = webdriver.ChromeOptions()
    options.add_argument('--headless=new')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    wait = WebDriverWait(driver, 15)

    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        all_messages = []

        print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –î–í–§–£...")
        dvfu_messages = dvfu_check_all_majors(driver, wait, USER_UNIQUE_ID) or []
        all_messages.extend(dvfu_messages)

        print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –£—Ä–§–£ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥)...")
        urfu_all_majors_messages = parse_urfu_all_majors(driver, wait, USER_UNIQUE_ID) or []
        all_messages.extend(urfu_all_majors_messages)

        print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –£—Ä–§–£ (–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥)...")
        urfu_today_messages = parse_urfu_today(driver, wait, USER_UNIQUE_ID)
        if isinstance(urfu_today_messages, list):
            all_messages.extend(urfu_today_messages)
        else:
            print("‚ö†Ô∏è parse_urfu_today –≤–µ—Ä–Ω—É–ª –Ω–µ —Å–ø–∏—Å–æ–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")

        if not all_messages:
            print("‚ùå –ù–∏ –æ–¥–∏–Ω —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω–æ–≥–æ ID.")
        else:
            print(f"üì¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {len(all_messages)}")
            for msg in all_messages:
                for chat_id in USER_CHAT_IDS:
                    try:
                        bot.send_message(chat_id, msg)
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")

    except Exception as e:
        print("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run():", e)
    finally:
        driver.quit()


if __name__ == "__main__":
    run()
